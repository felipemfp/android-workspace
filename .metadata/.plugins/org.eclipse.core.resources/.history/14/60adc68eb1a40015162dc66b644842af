package com.example.avaliacao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.example.avaliacao.NovoActivity;
import com.example.avaliacao.R;

import android.os.Bundle;
import android.app.ListActivity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.SimpleAdapter;

public class MainActivity extends ListActivity {

	private SharedPreferences prefs;
	private final String Sep = "---";
	private ArrayList<HashMap<String, String>> compromissos;
	private SimpleAdapter adapter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// setContentView(R.layout.activity_main);
		prefs = getSharedPreferences("arquivo", MODE_PRIVATE);
		compromissos = new ArrayList<HashMap<String, String>>();
		abrirCompromissos();
		String[] from = new String[] { "assunto", "local", "data" };
		int[] to = new int[] { R.id.assunto, R.id.local, R.id.data };
		int layout = R.layout.item_compromisso;
		adapter = new SimpleAdapter(this, compromissos, layout, from, to);
		setListAdapter(adapter);
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		// TODO Auto-generated method stub
		super.onListItemClick(l, v, position, id);
		Intent detalhe = new Intent(this, DetalheActivity.class);
		Bundle data = new Bundle();
		data.putString("assunto", compromissos.get(position).get("assunto"));
		data.putString("local", compromissos.get(position).get("local"));
		data.putString("data", compromissos.get(position).get("data"));
		detalhe.putExtras(data);
		startActivityForResult(detalhe, position);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.novo:
			Intent novo = new Intent(this, NovoActivity.class);
			startActivityForResult(novo, -1);
			break;
		}
		return true;
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		Log.i("Result", ""+ requestCode);
		if (requestCode == -1) {
			if (resultCode == RESULT_OK) {
				String _assunto = data.getCharSequenceExtra("assunto")
						.toString();
				String _local = data.getCharSequenceExtra("local").toString();
				String _data = data.getCharSequenceExtra("data").toString();

				salvarCompromisso(_assunto, _local, _data);
			}
		} else {
			if (resultCode == 1) {
				String _assunto = data.getCharSequenceExtra("assunto")
						.toString();
				String _local = data.getCharSequenceExtra("local").toString();
				String _data = data.getCharSequenceExtra("data").toString();

				alterarCompromisso(requestCode, _assunto, _local, _data);
			} else if (resultCode == 2) {
				removerCompromisso(requestCode);
			}
		}
	}

	private void removerCompromisso(int position) {

		Log.i("Compromisso", "Remover");
		SharedPreferences.Editor editor = prefs.edit();

		String _assunto = compromissos.get(position).get("assunto");
		String _data = compromissos.get(position).get("data");
		editor.remove(_assunto + Sep + _data);

		compromissos.remove(position);
		adapter.notifyDataSetChanged();
	}

	private void alterarCompromisso(int position, String assunto, String local,
			String data) {
		
		Log.i("Compromisso", "Alterar");
		SharedPreferences.Editor editor = prefs.edit();

		String _assunto = compromissos.get(position).get("assunto");
		String _data = compromissos.get(position).get("data");

		String chave = assunto + Sep + data;
		String valor = local;
		editor.remove(_assunto + Sep + _data);
		editor.putString(chave, valor);
		editor.apply();

		Compromisso item = new Compromisso(assunto, local, data);
		compromissos.set(position, item.get_map());

		adapter.notifyDataSetChanged();
	}

	private void abrirCompromissos() {

		Log.i("Compromisso", "Abrir");
		Map<String, String> map = (Map<String, String>) prefs.getAll();

		for (Map.Entry<String, String> mapItem : map.entrySet()) {
			String[] chave = mapItem.getKey().toString().split(Sep);
			String valor = mapItem.getValue().toString();
			Compromisso item = new Compromisso(chave[0], valor, chave[1]);
			compromissos.add(item.get_map());
		}
	}

	private void salvarCompromisso(String assunto, String local, String data) {
		Log.i("Compromisso", "Salvar");
		SharedPreferences.Editor editor = prefs.edit();

		String chave = assunto + Sep + data;
		String valor = local;
		editor.putString(chave, valor);
		editor.apply();

		Compromisso item = new Compromisso(assunto, local, data);
		compromissos.add(item.get_map());

		adapter.notifyDataSetChanged();
	}

}
